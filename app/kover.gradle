koverReport {
    filters {
        excludes {
            annotatedBy(
                    "dagger.Module",
                    "dagger.internal.DaggerGenerated",
                    "androidx.room.Database"
            )
            packages(
                    "hilt_aggregated_deps", // Hilt generated injectors
                    "*.databinding", // View Binding
                    "*utils" // Utils
            )
            classes(
                    "*_*Factory\$*", // Hilt

                    "*.BuildConfig", // Gradle generated

                    // Room
                    "*_Impl",
                    "*_Impl\$*",
                    "*AppDatabase\$*",

                    // Android UI
                    "*MainApplication",
                    "*Activity",
                    "*Activity\$*",
                    "*Fragment",
                    "*Fragment\$*",
                    "*Adapter",
                    "*Adapter\$*"
            )
        }
    }
}

def openReport(htmlOutDir) {
    final reportPath = "$htmlOutDir/index.html"

    println "HTML Report: $reportPath"

    def os = org.gradle.internal.os.OperatingSystem.current()
    if (os.isWindows()) {
        exec { commandLine 'cmd', '/c', "start $reportPath" }
    } else if (os.isMacOsX()) {
        exec { commandLine 'open', "$reportPath" }
    } else if (os.isLinux()) {
        try {
            exec { commandLine 'xdg-open', "$reportPath" }
        } catch (Exception ignored) {
            if (localProperties.containsKey("linux-html-cmd")) {
                exec { commandLine properties.get("linux-html-cmd"), "$reportPath" }
            } else {
                println "'linux-html-cmd' property could not be found in 'local.properties'"
            }
        }
    }
}

afterEvaluate {
    android.applicationVariants.all { variant ->
        def variantName = variant.name.capitalize()
        def htmlOutDir = file("$buildDir/reports/kover/html${variantName}")

        tasks.named("koverHtmlReport${variantName}").configure {
            doLast {
                openReport htmlOutDir
            }
        }
    }
}
